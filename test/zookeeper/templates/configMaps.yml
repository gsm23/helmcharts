apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.nameSpace }}-{{ .Values.Name }}-cm
data:
  tick: "2000"
  maxClientCnxns: "20"
  initLimit: "5"
  syncLimit: "2"
  servers: {{ $name := .Values.Name }} {{ $namespace := .Values.nameSpace}} {{ $nodeCount := .Values.replicaCount | int }}
          {{- range $index0 := until $nodeCount -}}
          {{- $index1 := $index0 | add1 -}}
          {{ $name }}-{{ $namespace }}-{{ $index0 }}.{{ $name }}-svc.prod-es.svc.cluster.local:2888:3888{{ if ne $index1 $nodeCount }};{{ end }}
          {{- end }}

  jaas.conf: |
     Server {
         org.apache.zookeeper.server.auth.DigestLoginModule required
         user_super="ddskafkasecret!1";
     };
     Client {
         org.apache.zookeeper.server.auth.DigestLoginModule required
         username="super"
         password="ddskafkasecret!1";
     };
  zookeeper.properties.template: |
        clientPort={{ .Values.configMaps.clientPort }}
        dataDir=/var/lib/zookeeper/data
        dataLogDir=/var/lib/zookeeper/log

        {# optional properties #}
        {% set other_props = {
        'ZOOKEEPER_TICK_TIME': 'tickTime',
        'ZOOKEEPER_GLOBAL_OUTSTANDING_LIMIT' : 'globalOutstandingLimit',
        'ZOOKEEPER_PRE_ALLOC_SIZE': 'preAllocSize',
        'ZOOKEEPER_SNAP_COUNT': 'snapCount',
        'ZOOKEEPER_TRACE_FILE': 'traceFile',
        'ZOOKEEPER_MAX_CLIENT_CNXNS' : 'maxClientCnxns',
        'ZOOKEEPER_CLIENT_PORT_ADDRESS' : 'clientPortAddress',
        'ZOOKEEPER_MIN_SESSION_TIMEOUT' : 'minSessionTimeout',
        'ZOOKEEPER_MAX_SESSION_TIMEOUT' : 'maxSessionTimeout',
        'ZOOKEEPER_FSYNC_WARNING_THRESHOLDMS' : 'fsync.warningthresholdms',
        'ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT' : 'autopurge.snapRetainCount',
        'ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL': 'autopurge.purgeInterval',
        'ZOOKEEPER_SYNC_ENABLED': 'syncEnabled',
        'ZOOKEEPER_ELECTION_ALG' : 'electionAlg',
        'ZOOKEEPER_INIT_LIMIT': 'initLimit',
        'ZOOKEEPER_LEADER_SERVES': 'leaderServes',
        'ZOOKEEPER_SYNC_LIMIT' : 'syncLimit',
        'ZOOKEEPER_CNX_TIMEOUT': 'cnxTimeout',
        'ZOOKEEPER_FORCE_SYNC': 'forceSync',
        'ZOOKEEPER_JUTE_MAX_BUFFER': 'jute.maxbuffer',
        'ZOOKEEPER_SKIP_ACL': 'skipACL',
        'ZOOKEEPER_QUORUM_LISTEN_ON_ALL_IPS': 'quorumListenOnAllIPs',
        'ZOOKEEPER_AUTH_PROVIDER': 'authProvider.1',
        'ZOOKEEPER_REQUIRE_CLIENT_AUTH_SCHEME': 'requireClientAuthScheme',
        'ZOOKEEPER_JAAS_LOGIN_RENEW': 'jaasLoginRenew',
        } -%}

        {% for k, property in other_props.iteritems() -%}
        {% if env.get(k) != None -%}
        {{ .Values.configMaps.property }}={{ .Values.configMaps.k }}
        {% endif -%}
        {% endfor -%}

        {% if env['ZOOKEEPER_SERVERS'] %}
        {% set servers = env['ZOOKEEPER_SERVERS'].split(';') %}
        {% for server in servers %}
        {{ .Values.configMaps.serverloop }}={{ .Values.configMaps.serverloopvalue }}
        {% endfor %}
        {% endif %}

        {% if env['ZOOKEEPER_GROUPS'] %}
        {% set groups = env['ZOOKEEPER_GROUPS'].split(';') %}
        {% for group in groups %}
        {{ .Values.configMaps.grouploop }}={{ .Values.configMaps.grooploopvalue }}
        {% endfor %}
        {% endif %}

        {% if env['ZOOKEEPER_WEIGHTS'] %}
        {% set weights = env['ZOOKEEPER_WEIGHTS'].split(';') %}
        {% for weight in weights %}
        {{ .Values.configMaps.weightloop }}={{ .Values.configMaps.weightloopvalue }}
        {% endfor %}
        {% endif %}
